{"version":3,"sources":["components/digit-button.js","components/operator-button.js","App.js","reportWebVitals.js","index.js"],"names":["DigitButton","dispatch","digit","className","onClick","type","ACTIONS","ADD_DIGIT","payload","OperatorButton","operator","CHOOSE_OPERATION","PERCENTAGE","CLEAR","DELETE_DIGIT","EVALUATE","reducer","state","overwrite","currentNumber","include","previousNumber","evaluate","length","slice","parseFloat","toString","prev","curr","isNaN","resulte","App","useReducer","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a4db4e04.chunk.js","sourcesContent":["import { ACTIONS } from \"../App\";\r\n\r\nexport default function DigitButton({ dispatch, digit, className }) {\r\n    return <button className={className || \"\"}\r\n        onClick={() => dispatch({ type: ACTIONS.ADD_DIGIT, payload: { digit } })}\r\n        >\r\n            {digit}\r\n        </button>\r\n}","import { ACTIONS } from \"../App\";\r\n\r\nexport default function OperatorButton({ dispatch, operator }) {\r\n    return <button className=\"operator-button\"\r\n        onClick={() => dispatch({ type: ACTIONS.CHOOSE_OPERATION, payload: { operator } })}\r\n        >\r\n            { operator }\r\n        </button>\r\n}","import { useReducer } from 'react';\r\nimport DigitButton from './components/digit-button';\r\nimport OperatorButton from './components/operator-button';\r\nimport './App.css';\r\n\r\nexport const ACTIONS = {\r\n  ADD_DIGIT: 'add-digit',\r\n  CHOOSE_OPERATION: 'choose-operation',\r\n  PERCENTAGE: 'percentage',\r\n  CLEAR: 'clear',\r\n  DELETE_DIGIT: 'delete-digit',\r\n  EVALUATE: 'evaluate'\r\n}\r\n\r\nfunction reducer(state, { type, payload }){\r\n  switch (type) {\r\n    case ACTIONS.ADD_DIGIT:\r\n      if (state.overwrite){\r\n        return {\r\n          ...state,\r\n          currentNumber: payload.digit,\r\n          overwrite: false\r\n        }\r\n      }\r\n\r\n      if (payload.digit === 0 && state.currentNumber === 0) {\r\n        return state\r\n      }\r\n      if (payload.digit === \".\" && state.currentNumber.include(\".\")) {\r\n        return state\r\n      }\r\n\r\n      return {\r\n        ...state, \r\n        currentNumber: `${state.currentNumber || ''}${payload.digit}`\r\n      };\r\n\r\n    case ACTIONS.CHOOSE_OPERATION:\r\n      if (state.currentNumber == null && state.previousNumber == null){\r\n        return state\r\n      }\r\n      \r\n      if (state.currentNumber == null){\r\n        return {\r\n          ...state,\r\n          operator: payload.operator\r\n        }\r\n      }\r\n\r\n      if (state.previousNumber == null){\r\n        return {\r\n          ...state,\r\n          operator: payload.operator, \r\n          previousNumber: state.currentNumber,\r\n          currentNumber: null\r\n        }\r\n      }\r\n      \r\n      return {\r\n        ...state,\r\n        operator: payload.operator, \r\n        previousNumber: evaluate(state),\r\n        currentNumber: null\r\n      }\r\n  \r\n    case ACTIONS.CLEAR:\r\n      return {};\r\n    \r\n    case ACTIONS.DELETE_DIGIT:\r\n      if (state.overwrite){\r\n        return {\r\n          ...state,\r\n          currentNumber: null,\r\n          overwrite: false\r\n        }\r\n      }\r\n\r\n      if (state.currentNumber == null) {\r\n        return state\r\n      }\r\n\r\n      if (state.currentNumber.length === 1){\r\n        return{\r\n          ...state,\r\n          currentNumber: null\r\n        }\r\n      }\r\n\r\n      return {\r\n        ...state, \r\n        currentNumber: state.currentNumber.slice(0, -1)\r\n      }\r\n\r\n    case ACTIONS.EVALUATE:\r\n      if (state.currentNumber == null || state.previousNumber == null || state.operator == null){\r\n        return state;\r\n      }\r\n\r\n      return {\r\n        ...state,\r\n        operator: null,\r\n        previousNumber: null,\r\n        overwrite: true,\r\n        currentNumber: evaluate(state)\r\n      }\r\n    \r\n    case ACTIONS.PERCENTAGE:\r\n      if (state.currentNumber == null){\r\n        return state\r\n      }\r\n\r\n      return {\r\n        ...state,\r\n        overwrite: true,\r\n        currentNumber: (parseFloat(state.currentNumber) / 100).toString()\r\n      }\r\n    \r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nfunction evaluate({ currentNumber, previousNumber, operator }){\r\n  const prev = parseFloat(previousNumber)\r\n  const curr = parseFloat(currentNumber)\r\n  if (isNaN(prev) || isNaN(curr)) {\r\n    return \"\"\r\n  }\r\n  \r\n  let resulte = \"\"\r\n  switch (operator){\r\n    case \"+\":\r\n      resulte = prev + curr\r\n      break\r\n    case \"-\":\r\n      resulte = prev - curr\r\n      break\r\n    case \"x\":\r\n      resulte = prev * curr\r\n      break\r\n    case \"/\":\r\n      resulte = curr !== 0 ? prev / curr : \"Error\"\r\n      break\r\n    default:\r\n      break\r\n  }\r\n  return resulte.toString()\r\n}\r\n\r\nfunction App() {\r\n  const [{ currentNumber }, dispatch] = useReducer(reducer, {});\r\n\r\n  return (\r\n    <div className=\"calculator\">\r\n     <div className=\"screen\">\r\n       <div className=\"current-number\">{currentNumber}</div>\r\n     </div>\r\n     <button \r\n      className=\"up-button\" \r\n      onClick={() => {dispatch({ type: ACTIONS.CLEAR })}}\r\n      >AC</button>\r\n     <button \r\n      className=\"up-button\"\r\n      onClick={() => {dispatch({ type: ACTIONS.DELETE_DIGIT })}}\r\n      >Del</button>\r\n     <button \r\n      className=\"up-button\"\r\n      onClick={ () => {dispatch({ type: ACTIONS.PERCENTAGE })}}\r\n      >%</button> \r\n     <OperatorButton dispatch={dispatch} operator=\"/\" />\r\n     <DigitButton dispatch={dispatch} digit=\"7\" />\r\n     <DigitButton dispatch={dispatch} digit=\"8\" />\r\n     <DigitButton dispatch={dispatch} digit=\"9\" />\r\n     <OperatorButton dispatch={dispatch} operator=\"x\" />\r\n     <DigitButton dispatch={dispatch} digit=\"4\" />\r\n     <DigitButton dispatch={dispatch} digit=\"5\" />\r\n     <DigitButton dispatch={dispatch} digit=\"6\" />\r\n     <OperatorButton dispatch={dispatch} operator=\"-\" />\r\n     <DigitButton dispatch={dispatch} digit=\"1\" />\r\n     <DigitButton dispatch={dispatch} digit=\"2\" />\r\n     <DigitButton dispatch={dispatch} digit=\"3\" />\r\n     <OperatorButton dispatch={dispatch} operator=\"+\" />\r\n     <DigitButton dispatch={dispatch} digit=\"0\" className=\"span-two\"/>\r\n     <DigitButton dispatch={dispatch} digit=\".\" />\r\n     <button \r\n      className=\"operator-button\" \r\n      onClick={() => {dispatch({ type: ACTIONS.EVALUATE })}}\r\n      >=</button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}